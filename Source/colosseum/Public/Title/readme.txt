////////////////////////////////////////////////////////////////////////////////
//	タイトルの実装について
//											のりっぷ
////////////////////////////////////////////////////////////////////////////////

１からの実装を書いていきます。




・フォルダ構成
　Title  +--Maps : LV_Title : タイトルのレベルファイル
　　　　 |
         +--Blueprint : BP_TitleGameMode : レベルのゲームモードにオーバーライドするブループリントクラス




実装手順
・レベルの新規作成
　ここではカラのレベルの作成を選んでLV_Titleと付けました。


・レベルのゲームモードのクラスの作成
　親クラスをAGameModeBaseにしたクラスATitleGameModeの作成
　UEエディタでクラスを作成する場合、先頭の文字が省略されます。（親クラスによってはAだったりUだったりします。親クラスが存在しない場合は何もつきません）

　注）UEエディタで作成したファイルをそのままVSで読むとファイル形式がshift-jisになってUEエディタの方で文字化けが生じます。
　　「名前を付けて＜ファイル名＞を保存」を選択して「上書き保存」の横にある▼を押して「エンコード付きで保存」を選択。
　　「Unicode(UTF-8)」を選択して保存しましょう。署名(BOMと呼ばれる)の有り無しがありますが、私は無しで保存しています。（コメントで日本語必ず使うため）
　　因みに署名ありで保存するとファイルの先頭に３バイトのデータ（0xEF BB BF)が付与されます。これは文字化け防止です。
　　エディタやコンパイラによってはこれでファイル形式を認識する場合がありすが、コンパイラによってはBOMをゴミだと認識してエラーを吐く場合があります。
　　VSはあっても無くても認識します。Web開発の世界ではUTF-8N(BOM無し)が一般的だそうですが、特殊文字や日本語を使わない場合エディタによっては、shift-jisと認識される場合があります。


・ブループリントで親クラスをATitleGameModeのブループリントを作成しBP_TitleGameMode
  を作成する

・BP_TitleGameMode を レベルのオーバーライドクラスに設定する
　UE5エディタのブループリントメニューから選択をします。これでレベルのブループリントの設定は終わり。


・タイトルの背景を表示してみる
　BP_TitleGameModeをダブルクリック。ブループリントを開き「Event BeginPlay」のビンから線を伸ばし検索ボックスから「Create Widget」を選択 Class のプルタブから
　「WBP_Common_OutGame」を選択。UIのフォルダのWidgetsのTitleにあるウィジェットを選択します。
　そこから線を伸ばし Add to Viewport を選択。先ほどのビンの「Return Value」から線を伸ばし Add to Viewport のTarget につなぎます。
　因みに、Add to Viewport を繋げないと表示されません。これはWidgetを表示させるためのノードです。
　Add to Viewportの↓を押すと「ZOder」という数値が表示されます。これは表示優先度です。数が大きくなると手前に表示されるようになります。
　背景なので、とりあえず0にしておきます。

・タイトルの実装
　「BP_TitleGameMode」のブループリントを表示します。先ほどの「Add to Viewport」のあとに線を伸ばし再び「Create Widget」を選択。Class は UI/Widgets/Title の
　「WBP_Title」を選択します。そこから線を伸ばし「Add to Viewport」を選択 。今度は背景より手前に表示したいので↓を押してZOder を表示、値を1にします。
　この値が0のままだと、背景と喧嘩してしまい表示されません。なので、手前に表示するために1にします。

・アニメーションの実装
　WBP_Titleにはアニメーションが設定されています。オープンアニメの「Animation_Open」ループ再生の「Animation_Loop」クローズ再生の「Animation_Close」。
　WBP_Titleのブループリントのイベントグラフを開き、「Event Construct」から線を出しアニメーション再生ノード「Play Animation」を選択。 In Animation　に
　Animesion_Open を渡します。これで、タイトルにインしたときのアニメーションが再生されます。

　左にあるグラフの下にオーバーライドっというプルタグをクリック。そこからオーバーライドする関数「OnAnimationFinished」っという、アニメーションが終了したときに
　呼ばれるイベントメソッドがあるのでそれを追加。再生が終了したアニメーションを返すイベントが出来ました。
　「Animetion_Open」が終了したら、「Animetion_Loop」アニメを呼ぶように「==」ノードを使い「Animetion_Open」と「Event OnAnimationFinished」から渡される
　アニメーションを比較。同じなら「Animation_Loop」を呼ぶようにします。
　ここまで、ノーコードでタイトルメニューを表示することが出来ました。

